/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./worker.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./worker.ts":
/*!*******************!*\
  !*** ./worker.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nimport { Phenotype, draw } from \"./models\"\n\nlet sourceData: Uint8ClampedArray = null\nlet scoreMatrix: number[]\n\nonmessage = msg => {\n  if (msg.data.init) {\n    sourceData = msg.data.data\n    scoreMatrix = calculateScoreMatrix(sourceData)\n  }\n  if (msg.data.fitness) {\n    const score = fitnessFunction(msg.data.data)\n    postMessage({\n      score,\n      index: msg.data.index\n    }, null)\n  }\n}\n\nconst canvas = new OffscreenCanvas(256, 256)\nconst ctx = canvas.getContext(\"2d\", { alpha: false })\n\nconst calculateScoreMatrix = (source: Uint8ClampedArray) => {\n  const result = []\n\n  for (let i = 0; i < source.length; i++) {\n    result[i] = 1\n  }\n\n  for (let x = 1; x < 255; x++) {\n    for (let y = 1; y < 255; y++) {\n      const sourceValue = getRgbValues(source, x, y)\n\n      const up = getRgbValues(source, x, y - 1)\n      const down = getRgbValues(source, x, y + 1)\n      const left = getRgbValues(source, x - 1, y)\n      const right = getRgbValues(source, x + 1, y)\n\n      const directions = [\n        up, down, left, right, sourceValue\n      ]\n\n      const devation =\n        standardDeviation(directions.map(x => x[0]))\n        + standardDeviation(directions.map(x => x[1]))\n        + standardDeviation(directions.map(x => x[2]))\n\n      result[256 * 4 * y + x * 4] = 1 + devation\n    }\n  }\n  return result\n}\n\n\nconst fitnessFunction = (phenotype: Phenotype) => {\n\n  draw(phenotype, ctx, sourceData)\n\n  let score = 0\n  const pix = ctx.getImageData(0, 0, 256, 256).data\n\n  for (let i = 0, n = pix.length; i < n; i += 4) {\n    for (let p = 0; p < 3; p++) {\n      const deviation = scoreMatrix[i]\n      const delta = Math.abs(sourceData[i + p] - pix[i + p])\n      score -= (delta * deviation)\n    }\n  }\n  return score\n}\n\nconst getRgbValues = (sourceData: Uint8ClampedArray, x: number, y: number) => {\n  return [\n    sourceData[(4 * 256 * y) + (4 * x)],\n    sourceData[(4 * 256 * y) + (4 * x) + 1],\n    sourceData[(4 * 256 * y) + (4 * x) + 2]]\n}\n\n\nfunction standardDeviation(values: number[]) {\n  const avg = average(values);\n\n  const squareDiffs = values.map(function (value) {\n    const diff = value - avg;\n    return diff * diff;\n  });\n\n  return Math.sqrt(average(squareDiffs));\n}\n\nfunction average(data: number[]) {\n  const sum = data.reduce(function (sum, value) {\n    return sum + value;\n  }, 0);\n\n  return sum / data.length;\n}\n\n\nconsole.log('worker ready')\n\n*/ \n\n\n//# sourceURL=webpack:///./worker.ts?");

/***/ })

/******/ });